// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBA.Data.Models;

#nullable disable

namespace TBA.Data.Migrations
{
    [DbContext(typeof(TrelloDbContext))]
    [Migration("20250809163905_AddColorCodeToLabel")]
    partial class AddColorCodeToLabel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardLabel", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<int>("LabelId")
                        .HasColumnType("int")
                        .HasColumnName("LabelID");

                    b.HasKey("CardId", "LabelId")
                        .HasName("PK__CardLabe__76692F34E070FB07");

                    b.HasIndex("LabelId");

                    b.ToTable("CardLabels", (string)null);
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.Property<int>("CardsCardId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("CardsCardId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("CardUser");
                });

            modelBuilder.Entity("TBA.Models.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AttachmentId")
                        .HasName("PK__Attachme__442C64DEAB9D5C8D");

                    b.HasIndex("CardId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("TBA.Models.Entities.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BoardId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BoardId")
                        .HasName("PK__Boards__F9646BD2DEB8162D");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("TBA.Models.Entities.BoardMember", b =>
                {
                    b.Property<int>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("member");

                    b.HasKey("BoardId", "UserId")
                        .HasName("PK__BoardMem__281CE718FA57FD0B");

                    b.HasIndex("UserId");

                    b.ToTable("BoardMembers");
                });

            modelBuilder.Entity("TBA.Models.Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CardId")
                        .HasName("PK__Cards__55FECD8E390AA84F");

                    b.HasIndex("ListId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("TBA.Models.Entities.CardAssignment", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CardId", "UserId")
                        .HasName("PK__CardAssi__848641445B22991B");

                    b.HasIndex("UserId");

                    b.ToTable("CardAssignments", (string)null);
                });

            modelBuilder.Entity("TBA.Models.Entities.ChecklistItem", b =>
                {
                    b.Property<int>("ChecklistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChecklistItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChecklistItemId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ChecklistItemId")
                        .HasName("PK_Checklis_A9F8A5E7B6C4D3E2");

                    b.HasIndex("CardId");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("TBA.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAA1B19AFA7");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TBA.Models.Entities.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LabelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelId"));

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LabelId")
                        .HasName("PK__Labels__397E2BA38245D5DC");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("TBA.Models.Entities.List", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"));

                    b.Property<int?>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("BoardID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("ListId")
                        .HasName("PK__Lists__E38328651AB4F9D7");

                    b.HasIndex("BoardId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("TBA.Models.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("NotifyAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32916742F8");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TBA.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "passwordHash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC36137E38");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534C5AD6E43")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CardLabel", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .IsRequired()
                        .HasConstraintName("FK__CardLabel__CardI__4F7CD00D");

                    b.HasOne("TBA.Models.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK__CardLabel__Label__5070F446");
                });

            modelBuilder.Entity("CardUser", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBA.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TBA.Models.Entities.Attachment", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", "Card")
                        .WithMany("Attachments")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK__Attachmen__CardI__5DCAEF64");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TBA.Models.Entities.Board", b =>
                {
                    b.HasOne("TBA.Models.Entities.User", "CreatedByNavigation")
                        .WithMany("Boards")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Boards__CreatedB__3B75D760");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("TBA.Models.Entities.BoardMember", b =>
                {
                    b.HasOne("TBA.Models.Entities.Board", "Board")
                        .WithMany("BoardMembers")
                        .HasForeignKey("BoardId")
                        .IsRequired()
                        .HasConstraintName("FK__BoardMemb__Board__3F466844");

                    b.HasOne("TBA.Models.Entities.User", "User")
                        .WithMany("BoardMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BoardMemb__UserI__403A8C7D");

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBA.Models.Entities.Card", b =>
                {
                    b.HasOne("TBA.Models.Entities.List", "List")
                        .WithMany("Cards")
                        .HasForeignKey("ListId")
                        .HasConstraintName("FK__Cards__ListID__46E78A0C");

                    b.Navigation("List");
                });

            modelBuilder.Entity("TBA.Models.Entities.CardAssignment", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", "Card")
                        .WithMany("Assignments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TBA.Models.Entities.User", "User")
                        .WithMany("CardAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBA.Models.Entities.ChecklistItem", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", "Card")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChecklisCardID_6E8B6712");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TBA.Models.Entities.Comment", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", "Card")
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK__Comments__CardID__5441852A");

                    b.HasOne("TBA.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comments__UserID__5535A963");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBA.Models.Entities.List", b =>
                {
                    b.HasOne("TBA.Models.Entities.Board", "Board")
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .HasConstraintName("FK__Lists__BoardID__4316F928");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("TBA.Models.Entities.Notification", b =>
                {
                    b.HasOne("TBA.Models.Entities.Card", "Card")
                        .WithMany("Notifications")
                        .HasForeignKey("CardId")
                        .HasConstraintName("FK__Notificat__CardI__59FA5E80");

                    b.HasOne("TBA.Models.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__59063A47");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBA.Models.Entities.Board", b =>
                {
                    b.Navigation("BoardMembers");

                    b.Navigation("Lists");
                });

            modelBuilder.Entity("TBA.Models.Entities.Card", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attachments");

                    b.Navigation("ChecklistItems");

                    b.Navigation("Comments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TBA.Models.Entities.List", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("TBA.Models.Entities.User", b =>
                {
                    b.Navigation("BoardMembers");

                    b.Navigation("Boards");

                    b.Navigation("CardAssignments");

                    b.Navigation("Comments");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
